{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fnil\fcharset0 Avenir-Book;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue0;\red84\green114\blue192;\red179\green179\blue179;\red252\green116\blue83;\red160\green217\blue107;
\red254\green193\blue89;\red225\green61\blue101;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\csgray\c0\c0;\cssrgb\c40000\c53333\c80000;\cssrgb\c75294\c75294\c75294;\cssrgb\c100000\c54118\c39608;\cssrgb\c68235\c86667\c49412;
\cssrgb\c100000\c79608\c41961;\cssrgb\c91373\c33725\c47059;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww15320\viewh14200\viewkind0
\deftab720
\pard\pardeftab720\sl520\sa320\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Week 8 Homework Part 2:\cf4 \strokec4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What does AJAX stand for?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 AJAX stands for Asynchronous Javascript and XML\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What does XML stand for?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 XML stands for eXtensible Markup\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What object does AJAX use to request data from the server?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 AJAX uses a built-in browser XMLHttpRequest object to request data from the server\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is the special feature of AJAX that makes developers like to work with it? Hint: It has to do with enhancing the User Experience (UX).\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes (?)\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Explain the basic five steps involved in the execution of an AJAX XMLHttpRequest between the browser and the server.\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	a.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 An event occurs on the page, which means the page is loaded, or a button is clicked.\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	b.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create an XMLHttpRequest Object, which sends a request to the server.\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	c.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The server sends a response back to the web page/browser that made the request.\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	d.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The response is read by using JavaScript.\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	e.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 JavaScript executes the page update.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What makes up the core of AJAX?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The core of AJAX is the XMLHttpRequest( ) object.\'a0\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is the XMLHttpRequest Object used for?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It\'92s used to exchange data with a web server behind the scenes (asynchronously), which means that it\'92s possible to update parts of a page instead of the whole page.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is the syntax for XMLHttpRequest()?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 variable = new XMLHttpRequest( );\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	9.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Give me an example of XMLHttpRequest(). Use your project code please.\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 const xhttps = new XMLHttpRequest( );\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	10.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What must be called before any other method calls and why?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The XMLHttpRequest( ) constructor initializes an XMLHttpRequest (object). This must be called before any other method calls.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	11.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In the OMDB Api project, even though the OMDB Api is served over http, we use https. Why?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On a live server, you can\'92t use http anymore. Github gh-pages don\'92t allow us to use http.\'a0\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	12.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What keyword is used to initialize the XMLHttpRequest object?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The new keyword is used to initialize the XMLHttpRequest object.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	13.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What does new XMLHttpRequest() create?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The new XMLHttpRequest( ) creates an object from a constructor function such as XMLHttpRequest( )\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	14.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What are the 5 things that the new keyword does?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	a.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It is used to create an object from a constructor function such as XMLHttpRequest().\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	b.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It sets the new object's internal, inaccessible (aka private), [[prototype]] property to be the constructor function's external, accessible, prototype object. Every function object automatically has a prototype property.\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	c.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It executes the constructor function, using the newly created object whenever this is mentioned.\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	d.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The new keyword makes this keyword point to the newly created object. The constructor function refers to the function that follows the new keyword.\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	e.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It returns this if the function does not return its own object\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	15.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Using code from your project, give me an example of this being returned due to the use of the new keyword with XMLHttpRequest() to create an instance of the XMLHttpRequest Object.\uc0\u8232 \cf4 \cb5 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl420\partightenfactor0
\ls1\ilvl1\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 if\strokec7  (\strokec6 this\strokec7 .readyState === \strokec8 4\strokec7  && \strokec6 this\strokec7 .status === \strokec8 200\strokec7 ) \{\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 console\strokec7 .\strokec9 log\strokec7 (\strokec6 this\strokec7 .responseText);\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 console\strokec7 .\strokec9 log\strokec7 (\strokec9 JSON\strokec7 .\strokec10 parse\strokec7 (\strokec6 this\strokec7 .responseText));\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec6 const\strokec7  data = \strokec9 JSON\strokec7 .\strokec10 parse\strokec7 (\strokec6 this\strokec7 .responseText);\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "movie-title"\strokec7 ).innerHTML = data.Title;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "poster"\strokec7 ).src = data.Poster;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "year"\strokec7 ).innerHTML = data.Year;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "released"\strokec7 ).innerHTML = data.Released;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "runtime"\strokec7 ).innerHTML = data.Runtime;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "director"\strokec7 ).innerHTML = data.Director;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "writer"\strokec7 ).innerHTML = data.Writer;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "actors"\strokec7 ).innerHTML = data.Actors;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "genre"\strokec7 ).innerHTML = data.Genre;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "plot"\strokec7 ).innerHTML = data.Plot;\strokec2 \uc0\u8232 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'a0\'a0\'a0\'a0\'a0\strokec9 document\strokec7 .\strokec10 getElementById\strokec7 (\strokec11 "awards"\strokec7 ).innerHTML = data.Awards;\strokec2 \uc0\u8232 \cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	16.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Describe what the XMLHttpRequest.open() method does.\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 XMLHttpRequest.open() initializes a newly-created request or re-initializes an existing one.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	17.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Using code from your project, give me an example of XMLHttpRequest.open().\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 An example: \cf4 \strokec7 xhttps.\strokec10 open\strokec7 (\strokec11 "GET"\strokec7 , url, \strokec8 true\strokec7 );\cf2 \strokec2 \uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	18.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Tell me what the values passed to the open() method are for, and give me the parameters they represent the values (aka arguments) of. Hint: part of the answer may reside in the slide deck and inside the Related Resources links at the end of the deck, and part will reside in the README.md of the week 8 homework repository. You will have come across the information while reading the instructions for going through the steps of building your project.\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	a.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The values passed to the open ( ) method are: get, post, put, delete, which resides in the \'93method\'94 parameter\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	b.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The second parameter is the URL, a DOMString\uc0\u8232 \cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	c.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The third parameter is a boolean, which indicates whether to perform the operation asynchronously or synchronsly.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	19.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Using code from your project, give me an example of XMLHttpRequest.send().\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl320\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 xhttps.send( );\'a0\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	20.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Tell me if there are any values passed to our send() method. What optionally could be passed to the method, and why do we NOT have to pass this optional parameter/argument to our send() method?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\sa320\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 There aren\'92t any values passed to our send( ) method. The send( ) method accepts any parameter, which lets you specify the request\'92s body. If the request method is \'93get\'94 or \'93head\'94, the body parameter is ignored, and the request body is set to null.\uc0\u8232 \cb1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \strokec4 \
}